import org.gradle.internal.jvm.Jvm

import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
}

group 'com.esaulpaugh'
version '1.1-SNAPSHOT'
archivesBaseName = "headlong-cli"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    if (Jvm.current().getJavaVersion() > JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

repositories {
    mavenCentral()
//    mavenLocal()
}

final String headlongVersion = '9.4.0'
final String junitVersion = '5.10.0'
final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("MMMM d yyyy", Locale.ENGLISH).withZone(ZoneId.of("UTC"))

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.esaulpaugh.headlong.cli.Main',
                   'Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'headlong-Version': headlongVersion,
                   'Build-Date': dateFormatter.format(Instant.now())

    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dependencies {

//    implementation files('libs/headlong-' + headlongVersion + '.jar')

    implementation 'com.esaulpaugh:headlong:' + headlongVersion
    implementation 'com.google.code.gson:gson:2.10.1'

    test.useJUnitPlatform()
    testImplementation "org.junit.jupiter:junit-jupiter-api:" + junitVersion
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:" + junitVersion
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}